from django.db import models
from location.models import Location
from django.contrib.auth.models import User
from django.utils.translation import gettext_lazy as _
from django.utils.crypto import get_random_string

class SparePart(models.Model):
    SECTION_CHOICES = [
        ('Communication', 'Communication'),
        ('Navigation', 'Navigation'),
        ('Surveillance', 'Surveillance'),
        ('Aviation Networks', 'Aviation Networks'),
        ('Miscellaneous', 'Miscellaneous'),
    ]

    STATUS_CHOICES = [
        ('Operational', 'Operational'),
        ('Unserviceable', 'Unserviceable'),
        ('Under Maintenance', 'Under Maintenance'),
    ]

    created_at = models.DateTimeField(auto_now_add=True, verbose_name=_("Created at"))
    updated_at = models.DateTimeField(auto_now=True, verbose_name=_("Updated at"))
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='spare_parts_created', verbose_name=_("Created by"))
    updated_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='spare_parts_updated', verbose_name=_("Updated by"))

    name = models.CharField(max_length=255, blank=True, verbose_name=_("Name"))
    serial_number = models.CharField(max_length=255, unique=True, blank=True, verbose_name=_("Serial Number"))
    part_number = models.CharField(max_length=255, blank=True, verbose_name=_("Part Number"))
    description = models.TextField(blank=True, verbose_name=_("Description"))
    tag_id = models.CharField(max_length=50, blank=True, verbose_name=_("Tag ID")) # Operational autogenerated if left blank
    section = models.CharField(max_length=50, choices=SECTION_CHOICES, blank=True, verbose_name=_("Section"))
    location = models.ForeignKey(Location, on_delete=models.CASCADE, blank=True, null=True, verbose_name=_("Location"))
    quantity = models.PositiveIntegerField(null=True, blank=True, verbose_name=_("Quantity"))
    shelf_number = models.CharField(max_length=50, blank=True, verbose_name=_("Shelf Number"))
    shelf_level = models.CharField(max_length=50, blank=True, verbose_name=_("Shelf Level"))
    box_number = models.CharField(max_length=50, blank=True, verbose_name=_("Box Number"))
    min_stock_level = models.PositiveIntegerField(null=True, blank=True, verbose_name=_("Minimum Stock Level"))
    pr_number = models.CharField(max_length=50, blank=True, verbose_name=_("PR Number"))
    status = models.CharField(max_length=50, choices=STATUS_CHOICES, blank=True, verbose_name=_("Status"))
    manufacturer = models.CharField(max_length=255, blank=True, verbose_name=_("Manufacturer"))
    model_number = models.CharField(max_length=255, blank=True, verbose_name=_("Model Number"))

    def __str__(self):
        return self.name if self.name else f"Spare Part - {self.pk}"

    def save(self, *args, **kwargs):
        # Auto-generate tag_id if it's empty
        if not self.tag_id:
            self.tag_id = 'OP-' + get_random_string(8).upper()  # Example: OP-RANDOMID
        super().save(*args, **kwargs)

    class Meta:
        verbose_name = _("Spare Part")
        verbose_name_plural = _("Spare Parts")

class SparePartPhoto(models.Model):
    spare_part = models.ForeignKey(SparePart, on_delete=models.CASCADE, related_name='photos', verbose_name=_("Spare Part"))
    photo = models.ImageField(upload_to='spare_parts/spare_part_photos/', verbose_name=_("Photo"))

    def __str__(self):
        return f"Photo - {self.spare_part.name} - {self.pk}"

    class Meta:
        verbose_name = _("Spare Part Photo")
        verbose_name_plural = _("Spare Part Photos")

class CalibrationHistory(models.Model):
    spare_part = models.ForeignKey(SparePart, on_delete=models.CASCADE, related_name='calibration_history', verbose_name=_("Spare Part"))
    date = models.DateField(verbose_name=_("Date"))
    remarks = models.TextField(blank=True, verbose_name=_("Remarks"))
    calibration_certificate = models.FileField(upload_to='spare_parts/calibration_certificates/', blank=True, verbose_name=_("Calibration Certificate"))

    def __str__(self):
        return f"Calibration - {self.spare_part.name} - {self.date}"

    class Meta:
        verbose_name = _("Calibration History")
        verbose_name_plural = _("Calibration Histories")

class MaintenanceHistory(models.Model):
    spare_part = models.ForeignKey(SparePart, on_delete=models.CASCADE, related_name='maintenance_history', verbose_name=_("Spare Part"))
    date = models.DateField(verbose_name=_("Date"))
    remarks = models.TextField(blank=True, verbose_name=_("Remarks"))

    def __str__(self):
        return f"Maintenance - {self.spare_part.name} - {self.date}"

    class Meta:
        verbose_name = _("Maintenance History")
        verbose_name_plural = _("Maintenance Histories")

class MaintenancePhoto(models.Model):
    maintenance_history = models.ForeignKey(MaintenanceHistory, on_delete=models.CASCADE, related_name='photos', verbose_name=_("Maintenance History"))
    photo = models.ImageField(upload_to='spare_parts/maintenance_photos/', verbose_name=_("Photo"))

    def __str__(self):
        return f"Photo - {self.maintenance_history.spare_part.name} - {self.maintenance_history.date}"

    class Meta:
        verbose_name = _("Maintenance Photo")
        verbose_name_plural = _("Maintenance Photos")